#!/bin/sh
set -eu

TEMPD=`mktemp -d ".ch_init.XXXXXXXXXXXX"`
cleanup() {
	rm -rf "${TEMPD}"
}
trap cleanup EXIT INT

usage() {
	cat <<EOF
Usage: ch_init [OPTION]... FILE ROOT SECTION...
Copy sources from SECTION(S) defined in FILE to ROOT

Options:
  -h, --help                   print this message
      --as-specified           do not recursively copy section includes
EOF
	return 0
}

# Check for required binaries
while IFS= read -r bin; do
	if ! env which "${bin}" >/dev/null 2>&1; then
		echo "ERROR: Missing required tool: ${bin}" 1>&2
		exit 1
	fi
done <<EOF
xargs
EOF

options="$(getopt -o h -l 'help,as-specified' -- $@)"
eval set -- "${options}"

SKIP_INCLUDES=false

while :; do
	case "$1" in
		-h|--help)
			usage && exit 0
			;;
		--as-specified)
			SKIP_INCLUDES=true
			shift 1
			;;
		*)
			break
			;;
	esac
done

shift 1
[ "$#" -lt 3 ] && usage && exit 2

INI="$(realpath $1)"
shift 1

ROOT="$1"
shift 1

DEPENDENCIES="${TEMPD}/dependencies"
touch "${DEPENDENCIES}"

mkdir -p "${ROOT}/etc"

touch "${ROOT}/etc/passwd"
grep -q '^root:' "${ROOT}/etc/passwd" || echo "root:x:0:0:root:/root:/bin/sh" >> "${ROOT}/etc/passwd"

touch "${ROOT}/etc/group"
grep -q '^root:' "${ROOT}/etc/group" || echo "root:x:0:" >> "${ROOT}/etc/group"

make_groups() {
	while IFS= read -r group
	do
		query="^${group}:"
		if ! grep -q "${query}" /etc/group
		then
			>&2 echo "no such group ${group}"
		elif ! grep -q "${query}" "${ROOT}/etc/group"
		then
			echo "(group) ${group}"
			grep "${query}" /etc/group >> "${ROOT}/etc/group"
		fi
	done
}

make_users() {
	while IFS= read -r user
	do
		query="^${user}:"
		if ! grep -q "${query}" /etc/passwd
		then
			>&2 echo "no such user ${user}"
		elif ! grep -q "${query}" "${ROOT}/etc/passwd"
		then
			echo "(user) ${user}"
			grep "${query}" /etc/passwd >> "${ROOT}/etc/passwd"
			id -ng "${user}" | make_groups
		fi
	done
}


iniget() {
	INI="$(realpath "${1}")"
	shift 1

	if ! grep -Fq "[${1}]" "${INI}"
	then
		>&2 echo "no section named \"${1}\""
		exit 1
	fi

	SECTION="$(sed -nr -e "/^\[${1}\]/,/^\[/{/^\[/!p}" "${INI}")"
	shift 1

	if [ "$#" -lt 1 ]
	then
		echo "${SECTION}"
		exit 0
	fi

	for PROP in "$@"
	do
		echo "${SECTION}" | sed -nr -e "/^${PROP}[ ]/{s/^[^=]*=[ ]*//;p}" | sed 's/\s\+$/\n/'
	done
}

# [section]
# comment      Section comment
# include      Include other section
# users        Copy users from /etc/passwd (and their groups from /etc/group)
# groups       Copy groups from /etc/group (does not copy users)
# paths        Copy paths (strips setuid/setgid), directories are recursive
# paths_setid  Copy paths with setuid/setgid bit
# dirs         Copy directories only
getparam() {
	iniget "${INI}" "$1" "$2" | tr ',' '\n' | sed 's/^[[:space:]]\+//;s/[[:space:]]\+$//' | sed '/^$/d'
}

# build list of all sections to include
get_deps() {
	while [ "$#" -gt 0 ]
	do
		SECTION="$1"
		shift 1

		# Check for the section
		if ! grep -qe "^\[${SECTION}\]" "${INI}"
		then
			>&2 echo "section \`${section}' is unknown"
			exit 1
		fi

		echo "${SECTION}" | tee -a "${DEPENDENCIES}"

		if [ "${SKIP_INCLUDES}" = false ]
		then
			getparam "${SECTION}" include | while IFS= read -r dep
			do
				if ! grep -q "^${dep}$" "${DEPENDENCIES}"
				then
					get_deps "${dep}"
				fi
			done
		fi
	done
}

get_deps $@ | while IFS= read -r section
do
	echo "Section ${section} \"$(iniget "${INI}" "${section}" comment)\""

	getparam "${section}" users | make_users

	getparam "${section}" groups | make_groups

	getparam "${section}" dirs | while IFS= read -r directory
	do
		mkdir -p "${ROOT}${directory}"
	done

	SOURCES="$(getparam "${section}" paths | tr '\n' ' ')"
	echo "${SOURCES}"

	SEARCH="$(ls -1d /lib*/ /usr/lib*/ /usr/share/lib*/ $(echo "${PATH}:" | tr ':' ' ') | tr '\n' ' ')"

	SOURCES="$(echo "${SOURCES}" | while read -r source
	do
		if [ -e "${source}" ]
		then
			echo "${source}"
			continue
		fi
		if ! 2>/dev/null ls -1d "${source}"
		then
			find ${SEARCH} -mindepth 1 -maxdepth 1 -path '*${source}'
		fi
	done | sort -u | tr '\n' ' ')"

	while [ "${SOURCES}x" != "x" ]
	do
		2>/dev/null tar -cf - ${SOURCES} | tar -xvf - -C "${ROOT}" >&2
		SOURCES="$(for source in ${SOURCES}
		do
			find "${source}" -type l | while read -r link
			do
				if [ -e "${link}" ]
				then
					cd $(dirname "${link}")
					realpath "$(readlink -n "${link}")"
				fi
			done
			find "${source}" -type f | while read -r file
			do
				if [ -e "${file}" ]
				then
					ldd "${file}" 2>/dev/null | awk '$3!=""{print $3}$3=""{print $1}'
				fi
			done
		done | sort -u | while read -r source
		do
			if [ ! -e "${ROOT}${source}" ]
			then
				echo "${source}"
			fi
		done | tr '\n' ' ')"
	done
done
