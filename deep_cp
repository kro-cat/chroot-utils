#!/bin/sh
set -eu

usage() {
	cat <<EOF
Usage: deep_cp [OPTION...] ROOT [SRC...]
Copy SRC to ROOT rootfs.  If SRC is '-' (default), then read sources from
standard input.  When copying SRC to ROOT, this program replicates the
directory and symlink structures in ROOT.  If SRC is an executable file, linked
libraries are copied to ROOT as if they were included as a SRC.

Options:
  -h, --help                   print this message
  -q, --quiet                  suppress verbose logging
EOF
	return 0
}

# Check for required binaries
while IFS= read -r bin; do
	if ! env which "${bin}" >/dev/null 2>&1; then
		echo "ERROR: Missing required tool: ${bin}" 1>&2
		exit 1
	fi
done <<EOF
realpath
EOF

options="$(getopt -o hq -l 'help,quiet' -- $@)"
eval set -- "${options}"

TAR_ARGS="-v"

while :; do
	case "$1" in
		-h|--help)
			usage && exit 0
			;;
		-q|--quiet)
			TAR_ARGS=""
			shift 1
			;;
		*)
			break
			;;
	esac
done

shift 1
[ "$#" -lt 1 ] && usage && exit 2

ROOT="$1"
shift 1

SEARCH="$( { ldconfig -p -c new | awk '$3=="=>"{print $4}' | sort -u | xargs dirname | sort -u; echo "${PATH}:" | tr ':' '\n'; } | xargs ls -p1d | sed 's#//#/#g' | tr '\n' ' ')"

filter_out_existing() {
	while IFS= read -r source
	do
		if [ ! -e "${ROOT}${source}" ]
		then
			echo "${source}"
		fi
	done
}

get_src() {
	while IFS= read -r source
	do
		if [ -e "${source}" ]
		then
			echo "${source}"
		elif ! 2>/dev/null ls -p1d "${source}"
		then
			matches="$(find ${SEARCH} -mindepth 1 -maxdepth 1 -path '*/'"${source}")"
			[ -z "${matches}" ] && >&2 echo "\`${source}' not found" || echo "${matches}"
		fi
	done | sort -u | filter_out_existing
}

search() {
	while IFS= read -r source
	do
		for link in $(find "${source}" -type l)
		do
			if [ -e "${link}" ]
			then
				cd $(dirname "${link}")
				realpath "$(readlink -n "${link}")"
			fi
		done
		for file in $(find "${source}" -type f)
		do
			if [ -e "${file}" ]
			then
				ldd "${file}" 2>/dev/null | grep -v 'not' | awk '$2=="=>"{print $3}$1~/^\//{print $1}'
			fi
		done
	done | sort -u | filter_out_existing
}

SOURCES="$([ "$#" -eq 0 ] && cat - || (for f in $@;do [ "$f" = "-" ] && cat - || echo "$f";done) | get_src)"

while [ "${SOURCES}x" != "x" ]
do
	2>/dev/null tar -cf - ${SOURCES} | tar -xf - ${TAR_ARGS} -C "${ROOT}"
	SOURCES="$(echo "${SOURCES}" | search)"
done

